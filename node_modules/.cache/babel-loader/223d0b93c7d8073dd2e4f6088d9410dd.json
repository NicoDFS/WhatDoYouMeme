{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apaul/Desktop/cs1951l/WhatDoYouMeme/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/apaul/Desktop/cs1951l/WhatDoYouMeme/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/apaul/Desktop/cs1951l/WhatDoYouMeme/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/apaul/Desktop/cs1951l/WhatDoYouMeme/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/apaul/Desktop/cs1951l/WhatDoYouMeme/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/apaul/Desktop/cs1951l/WhatDoYouMeme/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/apaul/Desktop/cs1951l/WhatDoYouMeme/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/apaul/Desktop/cs1951l/WhatDoYouMeme/src/captions/CaptionList.js\";\nimport React, { Component } from 'react';\nimport CaptionView from './CaptionView';\nimport CaptionListHeader from './CaptionListHeader';\nimport './CaptionList.css';\nimport CaptionCardFactory from '../web3Contracts/CaptionCardFactory';\nimport CaptionCard from '../web3Contracts/CaptionCard';\nimport BondingCurvedToken from '../web3Contracts/BondingCurvedToken';\nimport web3 from '../web3';\nimport Spinner from '../components/Spinner';\nvar DEFAULT_BUY_AMOUNT = Math.pow(10, 8);\n\nvar CaptionList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CaptionList, _Component);\n\n  function CaptionList(props) {\n    var _this;\n\n    _classCallCheck(this, CaptionList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CaptionList).call(this, props));\n    _this.state = {\n      data: [],\n      account: _this.props.account,\n      pendingTransactions: []\n    };\n\n    _this.getCaptionCards();\n\n    _this.listenForBuy();\n\n    return _this;\n  }\n\n  _createClass(CaptionList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.account !== this.state.account) {\n        this.setState({\n          data: [],\n          account: this.props.account\n        }, this.getCaptionCards);\n      }\n    }\n  }, {\n    key: \"listenForBuy\",\n    value: function listenForBuy() {\n      BondingCurvedToken.events.Minted().on(\"data\", function (event) {\n        // Remove value from waiting list and reload CaptionList\n        var updatedTransacts = this.state.pendingTransactions.filter(function (addr) {\n          return addr !== event.address;\n        });\n        this.setState({\n          data: [],\n          pendingTransactions: updatedTransacts\n        }, this.getCaptionCards);\n      }.bind(this)).on(\"error\", console.error);\n    }\n  }, {\n    key: \"onBuy\",\n    value: function () {\n      var _onBuy = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(addr) {\n        var accounts, price;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                CaptionCard.options.address = addr;\n                this.state.pendingTransactions.push(addr);\n                _context.next = 4;\n                return this.setState({\n                  pendingTransactions: this.state.pendingTransactions\n                });\n\n              case 4:\n                _context.next = 6;\n                return web3.eth.getAccounts();\n\n              case 6:\n                accounts = _context.sent;\n                _context.next = 9;\n                return CaptionCard.methods.priceToMint(DEFAULT_BUY_AMOUNT).call();\n\n              case 9:\n                price = _context.sent;\n                _context.next = 12;\n                return CaptionCard.methods.buy(DEFAULT_BUY_AMOUNT, accounts[0]).send({\n                  value: price,\n                  from: accounts[0]\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function onBuy(_x) {\n        return _onBuy.apply(this, arguments);\n      }\n\n      return onBuy;\n    }()\n  }, {\n    key: \"onSell\",\n    value: function () {\n      var _onSell = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(addr) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                CaptionCard.options.address = addr;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                _context2.next = 6;\n                return CaptionCard.methods.sell(DEFAULT_BUY_AMOUNT).send({\n                  from: accounts[0]\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function onSell(_x2) {\n        return _onSell.apply(this, arguments);\n      }\n\n      return onSell;\n    }()\n  }, {\n    key: \"getCaptionCards\",\n    value: function () {\n      var _getCaptionCards = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var account, len, data, i, addr, caption, buyPrice, sellPrice, balance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                account = this.state.account;\n                _context3.next = 3;\n                return CaptionCardFactory.methods.getCaptionCardsLength.call().then(function (result) {\n                  return result.toNumber();\n                });\n\n              case 3:\n                len = _context3.sent;\n                data = [];\n                i = 0;\n\n              case 6:\n                if (!(i < len)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                _context3.next = 9;\n                return CaptionCardFactory.methods.captionCards(i).call();\n\n              case 9:\n                addr = _context3.sent;\n                CaptionCard.options.address = addr;\n                _context3.next = 13;\n                return CaptionCard.methods.captionText().call();\n\n              case 13:\n                caption = _context3.sent;\n                _context3.next = 16;\n                return CaptionCard.methods.priceToMint(DEFAULT_BUY_AMOUNT).call();\n\n              case 16:\n                buyPrice = _context3.sent;\n                buyPrice = web3.utils.fromWei(buyPrice.toString(), 'ether');\n                _context3.next = 20;\n                return CaptionCard.methods.calculateSaleReturn(DEFAULT_BUY_AMOUNT).call();\n\n              case 20:\n                sellPrice = _context3.sent;\n                sellPrice = sellPrice == null ? null : web3.utils.fromWei(sellPrice.toString(), 'ether');\n                _context3.next = 24;\n                return CaptionCard.methods.balanceOf(account).call();\n\n              case 24:\n                balance = _context3.sent;\n                data.push({\n                  id: addr,\n                  sellPrice: sellPrice,\n                  buyPrice: buyPrice,\n                  balance: balance.toNumber() / DEFAULT_BUY_AMOUNT,\n                  caption: caption\n                });\n\n              case 26:\n                i++;\n                _context3.next = 6;\n                break;\n\n              case 29:\n                this.setState({\n                  data: data\n                });\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getCaptionCards() {\n        return _getCaptionCards.apply(this, arguments);\n      }\n\n      return getCaptionCards;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      /* Sort in order of descending price. */\n      var sortedData = this.state.data.sort(function (a, b) {\n        return b.buyPrice - a.buyPrice;\n      });\n      var captions = sortedData.map(function (data) {\n        return React.createElement(CaptionView, {\n          id: data.id,\n          key: data.id,\n          caption: data.caption,\n          balance: data.balance,\n          price: data.buyPrice,\n          sellPrice: data.sellPrice,\n          onSell: _this2.onSell,\n          onBuy: _this2.onBuy.bind(_this2),\n          hasPendingTransaction: _this2.state.pendingTransactions.includes(data.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"CaptionList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(CaptionListHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"CaptionListMainContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, captions.length > 0 ? captions : React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return CaptionList;\n}(Component);\n\nexport default CaptionList;","map":{"version":3,"sources":["/Users/apaul/Desktop/cs1951l/WhatDoYouMeme/src/captions/CaptionList.js"],"names":["React","Component","CaptionView","CaptionListHeader","CaptionCardFactory","CaptionCard","BondingCurvedToken","web3","Spinner","DEFAULT_BUY_AMOUNT","CaptionList","props","state","data","account","pendingTransactions","getCaptionCards","listenForBuy","setState","events","Minted","on","event","updatedTransacts","filter","addr","address","bind","console","error","options","push","eth","getAccounts","accounts","methods","priceToMint","call","price","buy","send","value","from","sell","getCaptionCardsLength","then","result","toNumber","len","i","captionCards","captionText","caption","buyPrice","utils","fromWei","toString","calculateSaleReturn","sellPrice","balanceOf","balance","id","sortedData","sort","a","b","captions","map","onSell","onBuy","includes","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CaptionView from './CaptionView';\nimport CaptionListHeader from './CaptionListHeader';\nimport './CaptionList.css';\nimport CaptionCardFactory from '../web3Contracts/CaptionCardFactory';\nimport CaptionCard from '../web3Contracts/CaptionCard';\nimport BondingCurvedToken from '../web3Contracts/BondingCurvedToken';\nimport web3 from '../web3';\nimport Spinner from '../components/Spinner';\n\nconst DEFAULT_BUY_AMOUNT = 10 ** 8;\n\nclass CaptionList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      account: this.props.account,\n      pendingTransactions: []\n    };\n    this.getCaptionCards();\n    this.listenForBuy();\n  }\n\n  componentDidUpdate() {\n    if (this.props.account !== this.state.account) {\n      this.setState(\n        {data: [], account: this.props.account},\n        this.getCaptionCards\n      );\n    }\n  }\n\n  listenForBuy() {\n    BondingCurvedToken.events.Minted().on(\"data\", function(event) {\n      // Remove value from waiting list and reload CaptionList\n      var updatedTransacts = this.state.pendingTransactions.filter(addr => addr !== event.address);\n      this.setState(\n        {data: [], pendingTransactions: updatedTransacts},\n        this.getCaptionCards\n      );\n    }.bind(this)).on(\"error\", console.error);\n  }\n\n  async onBuy(addr) {\n    CaptionCard.options.address = addr;\n    this.state.pendingTransactions.push(addr);\n    await this.setState({pendingTransactions: this.state.pendingTransactions})\n    const accounts = await web3.eth.getAccounts();\n    let price = await CaptionCard.methods.priceToMint(DEFAULT_BUY_AMOUNT).call();\n    await CaptionCard.methods.buy(\n      DEFAULT_BUY_AMOUNT, accounts[0]).send(\n        {value: price, from: accounts[0]});\n  }\n\n  async onSell(addr) {\n    CaptionCard.options.address = addr;\n    const accounts = await web3.eth.getAccounts();\n    await CaptionCard.methods.sell(\n      DEFAULT_BUY_AMOUNT).send(\n        {from: accounts[0]});\n  }\n\n  async getCaptionCards() {\n    const account = this.state.account;\n    const len = await CaptionCardFactory.methods.getCaptionCardsLength.call().then(result => result.toNumber());\n    var data = []\n    for (var i = 0; i < len; i++) {\n      let addr = await CaptionCardFactory.methods.captionCards(i).call();\n      CaptionCard.options.address = addr;\n      let caption = await CaptionCard.methods.captionText().call();\n      let buyPrice = await CaptionCard.methods.priceToMint(DEFAULT_BUY_AMOUNT).call();\n      buyPrice = web3.utils.fromWei(buyPrice.toString(), 'ether');\n\n      let sellPrice = await CaptionCard.methods.calculateSaleReturn(DEFAULT_BUY_AMOUNT).call();\n      sellPrice = sellPrice == null ? null : web3.utils.fromWei(sellPrice.toString(), 'ether');\n\n\n      let balance = await CaptionCard.methods.balanceOf(account).call();\n      data.push({id: addr, sellPrice: sellPrice, buyPrice: buyPrice, balance: balance.toNumber() / DEFAULT_BUY_AMOUNT, caption: caption});\n    }\n    this.setState({\n      data: data\n    });\n  }\n\n  render() {\n    /* Sort in order of descending price. */\n    const sortedData = this.state.data.sort(function(a, b){\n      return b.buyPrice - a.buyPrice\n    });\n    const captions = sortedData.map((data) => {\n      return <CaptionView\n        id={data.id}\n        key={data.id}\n        caption={data.caption}\n        balance={data.balance}\n        price={data.buyPrice}\n        sellPrice={data.sellPrice}\n        onSell={this.onSell}\n        onBuy={this.onBuy.bind(this)}\n        hasPendingTransaction={this.state.pendingTransactions.includes(data.id)}\n      />\n    });\n\n    return (\n      <div className=\"CaptionList\">\n        <CaptionListHeader />\n        <div className=\"CaptionListMainContainer\">\n          {captions.length > 0 ?\n           captions\n           : <Spinner /> }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CaptionList;\n"]},"metadata":{},"sourceType":"module"}